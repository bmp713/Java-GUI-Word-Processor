// Brandon Piper
// cmps109
// Program #4

import javax.swing.*;
import java.awt.event.*;
import tio.*;
import java.util.*;
import java.io.*;

/* The JMenuListener is a generic event listener that handles
 * nearly all of the events generated by the menus.
 */
class JMenuListener implements ActionListener {
    private String source;
    private JTextArea view;
    private ArrayList<EditBuffer> buffers;
    private JMenu bufferMenu;
    private int counter = 1;

    /* constructor takes in a source for the item that triggered the
     * event.  also the area view, the buffers array, and the menu
     */
    public JMenuListener( String source, JTextArea view, 
                          ArrayList<EditBuffer> buffers, JMenu bufferMenu ){
        this.source = source;
        this.view = view;
        this.buffers = buffers;
        this.bufferMenu = bufferMenu;
    }

    /* actionPerformed handles all events that can occur from
     * various menu events.  when an event is triggered a string
     * is passed that tells which menuItem triggered the event.
     */
    public void actionPerformed(ActionEvent e) {
        if( source.equals("New") ){
            BufferedWriter out = null;
            counter++;
            try{
		String fileName = "Unnamed"+counter;
                out = new BufferedWriter(new FileWriter(fileName));
                out.write("");
                out.close();
                JMenuItem newBuffer = new JMenuItem( "<"+fileName+">" );
                BuffListener newBufL = new BuffListener(buffers, view, fileName);
                newBuffer.addActionListener(newBufL);
                bufferMenu.add(newBuffer);
                buffers.add(new EditBuffer( fileName ) );
                view.setDocument( buffers.get(buffers.size()-1) );
                view.setText( buffers.get(buffers.size()-1).toString() );
            }catch(Exception f){};
        }
        else if( source.equals("Open") ){
            JFileChooser choose = new JFileChooser();
            choose.showOpenDialog(null);
            try{
                String fileName = choose.getSelectedFile().getName();
		EditBuffer open = new EditBuffer( fileName );
                buffers.add( open );
                JMenuItem newBuffer = new JMenuItem(fileName);
                BuffListener newBufL = new BuffListener(buffers, view, fileName);
                newBuffer.addActionListener(newBufL);
                bufferMenu.add(newBuffer);

                view.setDocument( buffers.get(buffers.size()) );
                view.setText( buffers.get( buffers.size() ).toString() );
            }catch(Exception f){};

        }
        else if( source.equals("Save") ){
            try{
                EditBuffer doc = (EditBuffer) view.getDocument();
                doc.write();
            }catch(Exception g){};
        }
        else if( source.equals("SaveAs") ){
            JFileChooser choose = new JFileChooser();
            choose.showSaveDialog(null);
            try{
                String fileName = choose.getSelectedFile().getName();
                EditBuffer doc = (EditBuffer) view.getDocument();
                doc.write( fileName );
            }
            catch(Exception g){};
        }
        else if( source.equals("Exit") ){
            for( int i = 0; i < buffers.size(); i++ ){
                try{
                    String input = JOptionPane.showInputDialog("Save "
                                   + buffers.get(i).getFileName()
                                   + " (yes/no)" );
                    if( input.equals("yes") ){
                        buffers.get(i).write(); 
                    }
                }
                catch(Exception g){};
            }
            System.exit(0);
        }
        else if( source.equals("Copy") ){
            view.copy();
        }
        else if( source.equals("Cut") ){
            view.cut();
        }
        else if( source.equals("Paste") ){
            view.paste();
        }
        else if( source.equals("Find") ){
            try{
                String input = JOptionPane.showInputDialog("Find");
                EditBuffer doc = (EditBuffer) view.getDocument();
                int offset = doc.find(input);
                view.setCaretPosition( offset );
            }catch(Exception i){};
        }
        else if( source.equals("Replace") ){
            try{
                String find = JOptionPane.showInputDialog("Find");
                String replace = JOptionPane.showInputDialog("Replace With");
                EditBuffer doc = (EditBuffer) view.getDocument();
                doc.replace( find, replace );
                view.setText( doc.toString() );
            }catch(Exception w){};
        }
        else if( source.equals("GoTo") ){
            try{
                String input = JOptionPane.showInputDialog("GoTo");
                int offset = Integer.parseInt( input );
                EditBuffer doc = (EditBuffer) view.getDocument();
                offset = doc.goTo( offset );
                view.setCaretPosition( offset );
            }catch(Exception g){};
        }
    }
}
